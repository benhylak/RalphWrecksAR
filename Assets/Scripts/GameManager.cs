using UnityEngine.XR.iOS;
using UnityEngine;
using UnityEngine.XR;
using System.Collections.Generic;

public class GameManager : MonoBehaviour
{
    public float maxRayDistance = 30.0f;
    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer

    public GameObject Rectacle;

    public GameObject ArcadeCabinet;

    public bool placed = false;

    public Transform m_Camera;

    public UnityARCameraManager cameraManager;

    void Start()
    {
        ArcadeCabinet.SetActive(false);
    }

    void SetDebug(bool enabled)
    {
        cameraManager.getPointCloud = enabled;
    }

    bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
    {
        List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
        if (hitResults.Count > 0) {
            foreach (var hitResult in hitResults) {
                Debug.Log ("Got hit!");
                Rectacle.transform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
                Rectacle.transform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
                Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", Rectacle.transform.position.x, Rectacle.transform.position.y, Rectacle.transform.position.z));
                return true;
            }
        }
        return false;
    }
    
    // Update is called once per frame
    void Update () {
        #if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
        if (Rectacle != null && Input.GetMouseButtonDown (0)) {
            Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
            RaycastHit hit;
            
            //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
            //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
                //we're going to get the position from the contact point
                Rectacle.transform.position = hit.point;
                Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", Rectacle.transform.position.x, Rectacle.transform.position.y, Rectacle.transform.position.z));

                //and the rotation from the transform of the plane collider
                Rectacle.transform.rotation = hit.transform.rotation;
            }
        }
        #else
        if (Rectacle != null)
        {
            if(Input.touchCount > 0) 
            {
                var touch = Input.GetTouch(0);

                if (touch.phase == TouchPhase.Began)
                {
                    placed = !placed;

                    //this.SetDebug(!placed);
    
                    ArcadeCabinet.SetActive(placed);
                    
                    if(placed)
                    {
                        ArcadeCabinet.SetActive(true);

                        ArcadeCabinet.transform.position = Rectacle.transform.position;

                        var cameraFloorPos = m_Camera.transform.position;
                        cameraFloorPos.y = ArcadeCabinet.transform.position.y;

                        var lookAtCameraFlattened = cameraFloorPos - ArcadeCabinet.transform.position;

                        ArcadeCabinet.transform.forward = lookAtCameraFlattened;
                        //ArcadeCabinet.transform.rotation = Rectacle.transform.rotation; //TODO -- face me!
                    }

                    Rectacle.SetActive(!placed);
                }
            }

            //var screenPosition = Camera.main.ScreenToViewportPoint(new Vector3(0.5f, 0.5f, 0));

            ARPoint point = new ARPoint {
                x = 0.5f,
                y = 0.5f
            };

            // prioritize reults types
            ARHitTestResultType[] resultTypes = {
                //ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingGeometry,
                ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
                // if you want to use infinite planes use this:
                //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                ARHitTestResultType.ARHitTestResultTypeEstimatedHorizontalPlane, 
                ARHitTestResultType.ARHitTestResultTypeEstimatedVerticalPlane, 
                //ARHitTestResultType.ARHitTestResultTypeFeaturePoint
            }; 
            
            foreach (ARHitTestResultType resultType in resultTypes)
            {
                if (HitTestWithResultType (point, resultType))
                {
                    return;
                }
            }
        }
        #endif

    }
}